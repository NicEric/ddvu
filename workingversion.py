# -*- coding: utf-8 -*-
"""AITEST

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JFt99ON8-hK3luqwZG0C10yjSdOiNrQ-
"""

import streamlit as st
import openai
import pdfplumber
from io import StringIO
import logging

# Configure your OpenAI API key
openai.api_key = st.secrets["openai"]["api_key"]

# Configure logging
logging.basicConfig(level=logging.INFO)

def read_pdf(file):
    text = ""
    try:
        with pdfplumber.open(file) as pdf:
            for page in pdf.pages:
                text += page.extract_text()
    except Exception as e:
        st.error(f"Fel vid läsning av PDF: {e}")
        logging.error(f"Fel vid läsning av PDF: {e}")
    return text

def analyze_applications(applications, job_description):
    # Build the prompt with an additional request for justification
    prompt = f"Användaren har gett dig {len(applications)} filer som är jobbansökningar och 1 fil som är själva jobbannonsen som ansökningarna är till. \
    Ditt uppdrag är att rangordna efter mest lämpliga kandidater baserat på deras kvalifikationer och erfarenheter i förhållande till jobbannonsen. \
    Jag vill också att du plockar fram för- och efternamn på kandidaterna och motiverar varför du rangordnar dem i denna ordning.\n\n"

    for i, application in enumerate(applications):
        prompt += f"Ansökan {i+1}:\n{application}\n\n"

    prompt += f"Jobbannons:\n{job_description}\n\n"

    prompt += "Rangordna kandidaterna, plocka fram för- och efternamn på dem och förklara varför varje kandidat har placerats i denna ordning."

    try:
        response = openai.Completion.create(
            engine="gpt-3.5-turbo-instruct",
            prompt=prompt,
            max_tokens=750,
            timeout=30  # Maintain the timeout for API calls
        )
        return response.choices[0].text
    except openai.error.OpenAIError as e:
        st.error(f"Fel vid API-anrop: {e}")
        logging.error(f"Fel vid API-anrop: {e}")
        return None
    except Exception as e:
        st.error(f"En oväntad fel inträffade: {e}")
        logging.error(f"En oväntad fel inträffade: {e}")
        return None

st.title("Jobbansökningsanalys med GPT")

st.header("Ladda upp jobbansökningar")
uploaded_files = st.file_uploader("Välj jobbansökningar (PDF)", accept_multiple_files=True, type=["pdf"])

st.header("Ladda upp jobbannonsen")
job_ad_file = st.file_uploader("Välj jobbannons (PDF)", type=["pdf"])

if st.button("Analysera") and uploaded_files and job_ad_file:
    st.write("Analyserar ansökningar, vänligen vänta...")

    applications = [read_pdf(file) for file in uploaded_files]
    job_description = read_pdf(job_ad_file)

    if None not in applications and job_description:
        result = analyze_applications(applications, job_description)
        if result:
            st.write(result)